
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://deudqfjiieufqenzfclv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRldWRxZmppaWV1ZnFlbnpmY2x2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwNjYzNzUsImV4cCI6MjA2MTY0MjM3NX0.ytm2GuUx5eRyTAAOKkL5WPyXhA9g1nX7xUC5qEkOYko";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined
  }
});

// Initialize storage bucket for training videos if it doesn't exist
async function initStorage() {
  try {
    // Check for bucket existence through JavaScript SDK
    const { data: buckets } = await supabase.storage.listBuckets();
    
    // Look for the training_videos bucket
    if (!buckets || !buckets.find(bucket => bucket.name === 'training_videos')) {
      console.log("Training videos bucket not found. Creating it now...");
      
      // Create the bucket with a smaller file size limit to avoid 413 errors
      const { data, error } = await supabase.storage
        .createBucket('training_videos', {
          public: true, // Make files publicly accessible
          fileSizeLimit: 1024 * 1024 * 50, // 50MB file size limit (reduced from 100MB)
        });
      
      if (error) {
        console.error("Error creating training_videos bucket:", error);
      } else {
        console.log("Created training_videos bucket successfully:", data);
      }
    } else {
      console.log("Training videos bucket already exists");
    }
  } catch (error) {
    console.error("Error checking/creating storage buckets:", error);
  }
}

// Initialize storage when the client is imported
if (typeof window !== 'undefined') {
  initStorage();
}
